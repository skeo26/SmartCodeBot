Асинхронные операции могут быть использованы для решения сложных задач, таких как асинхронные запросы к базе данных, обработка файлов или работа с несколькими потоками данных. Рассмотрим более сложные примеры.

<b>1. Асинхронный HTTP-запрос с использованием HttpClient</b>

Асинхронные HTTP-запросы позволяют эффективно взаимодействовать с веб-API.

<pre><code>public async Task&lt;string&gt; GetDataFromApiAsync(string url)
{
    using (HttpClient client = new HttpClient())
    {
        HttpResponseMessage response = await client.GetAsync(url);
        response.EnsureSuccessStatusCode(); // Проверка успешности ответа
        string responseData = await response.Content.ReadAsStringAsync();
        return responseData;
    }
}
</code></pre>

<b>2. Асинхронная обработка нескольких файлов</b>

Обработка нескольких файлов параллельно с использованием асинхронных операций.

<pre><code>public async Task ProcessFilesAsync(string[] filePaths)
{
    var tasks = filePaths.Select(async filePath =>
    {
        string content = await File.ReadAllTextAsync(filePath);
        Console.WriteLine($"Файл {filePath}: {content.Substring(0, 50)}...");
    });

    await Task.WhenAll(tasks); // Ожидание завершения всех задач
}
</code></pre>

<b>3. Асинхронный поток с CancelationToken</b>

В этом примере мы используем <code>CancellationToken</code> для отмены операции, если пользователь решит прервать процесс.

<pre><code>public async Task PerformLongRunningTaskAsync(CancellationToken token)
{
    for (int i = 0; i &lt; 10; i++)
    {
        if (token.IsCancellationRequested)
        {
            Console.WriteLine("Операция отменена.");
            return;
        }
        await Task.Delay(1000); // Симуляция долгой операции
        Console.WriteLine($"Шаг {i + 1}");
    }
}
</code></pre>

<b>4. Асинхронная обработка данных с использованием параллельных потоков</b>

В этом примере несколько асинхронных операций выполняются параллельно и результаты собираются в один список.

<pre><code>public async Task&lt;List&lt;string&gt;&gt; ProcessDataAsync(List&lt;string&gt; data)
{
    var tasks = data.Select(async item =>
    {
        await Task.Delay(500); // Симуляция обработки
        return item.ToUpper();
    });

    List&lt;string&gt; results = await Task.WhenAll(tasks);
    return results.ToList();
}
</code></pre>

<b>5. Асинхронная очередь сообщений с использованием Task и CancellationToken</b>

Использование асинхронной очереди сообщений с отменой операций.

<pre><code>public async Task ProcessMessagesAsync(Queue&lt;string&gt; messageQueue, CancellationToken token)
{
    while (messageQueue.Count &gt; 0)
    {
        if (token.IsCancellationRequested)
        {
            Console.WriteLine("Обработка сообщений отменена.");
            return;
        }

        string message = messageQueue.Dequeue();
        await Task.Delay(500); // Симуляция обработки сообщения
        Console.WriteLine($"Обработано сообщение: {message}");
    }
}
</code></pre>

<b>Основные моменты:</b>

- Асинхронные операции позволяют эффективно обрабатывать длительные задачи (например, HTTP-запросы, обработка файлов).
- <code>Task.WhenAll</code> используется для ожидания завершения нескольких асинхронных операций.
- Для отмены асинхронных операций можно использовать <code>CancellationToken</code>.
- Для обработки данных параллельно можно использовать несколько асинхронных задач.

