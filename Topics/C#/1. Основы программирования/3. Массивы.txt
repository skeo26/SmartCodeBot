<b>–ú–∞—Å—Å–∏–≤—ã –≤ C#</b>

–ú–∞—Å—Å–∏–≤ ‚Äî —ç—Ç–æ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –æ–¥–Ω–æ—Ç–∏–ø–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–ª–∏–Ω–æ–π. –≠–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –∏–Ω–¥–µ–∫—Å–∏—Ä—É—é—Ç—Å—è, –Ω–∞—á–∏–Ω–∞—è —Å 0.

<b>üìå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b>
<pre><code>// –û–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
int[] numbers = { 10, 20, 30, 40, 50 };

string[] fruits = new string[] { "apple", "banana", "cherry" };

double[] prices = new double[3];
prices[0] = 5.99;
prices[1] = 10.25;
prices[2] = 7.50;
</code></pre>

<b>üß∞ –ü–æ–ª–µ–∑–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –º–µ—Ç–æ–¥—ã –º–∞—Å—Å–∏–≤–æ–≤:</b>

‚úîÔ∏è <b>Length</b> ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤  
‚úîÔ∏è <b>Array.Sort()</b> ‚Äî —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é  
‚úîÔ∏è <b>Array.Reverse()</b> ‚Äî —Ä–∞–∑–≤–æ—Ä–æ—Ç –º–∞—Å—Å–∏–≤–∞  
‚úîÔ∏è <b>Array.IndexOf(array, value)</b> ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è  
‚úîÔ∏è <b>Array.Clear(array, index, count)</b> ‚Äî –æ–±–Ω—É–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã  
‚úîÔ∏è <b>Array.Resize(ref array, newSize)</b> ‚Äî –∏–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞  
‚úîÔ∏è <b>Array.Exists(array, predicate)</b> ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–π —É—Å–ª–æ–≤–∏—é  
‚úîÔ∏è <b>Array.Find(array, predicate)</b> ‚Äî –Ω–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —É—Å–ª–æ–≤–∏—é

<b>üß™ –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ç–æ–¥–∞–º–∏:</b>

<b>1. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–∞</b>
<pre><code>int[] nums = { 3, 1, 4, 2 };
Array.Sort(nums); // nums: 1, 2, 3, 4
</code></pre>

<b>2. –†–∞–∑–≤–æ—Ä–æ—Ç –º–∞—Å—Å–∏–≤–∞</b>
<pre><code>Array.Reverse(nums); // nums: 4, 3, 2, 1
</code></pre>

<b>3. –ü–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–∞</b>
<pre><code>int index = Array.IndexOf(nums, 3); // index = 1
</code></pre>

<b>4. –û—á–∏—Å—Ç–∫–∞ –º–∞—Å—Å–∏–≤–∞ (—ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞–Ω—É—Ç 0)</b>
<pre><code>Array.Clear(nums, 0, 2); // nums: 0, 0, 2, 1
</code></pre>

<b>5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞</b>
<pre><code>bool hasEven = Array.Exists(nums, x => x % 2 == 0); // true
</code></pre>

<b>6. –ü–æ–∏—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —á–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞</b>
<pre><code>int firstEven = Array.Find(nums, x => x % 2 == 0); // 2
</code></pre>

<b>üîÅ –ü–µ—Ä–µ–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤:</b>
<pre><code>foreach (int number in nums)
{
    Console.WriteLine(number);
}
</code></pre>

<b>‚úÖ –ò—Ç–æ–≥:</b>
- –ú–∞—Å—Å–∏–≤ ‚Äî —ç—Ç–æ –Ω–∞–±–æ—Ä –æ–¥–Ω–æ—Ç–∏–ø–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–ª–∏–Ω–æ–π.
- –í—Å–µ –º–∞—Å—Å–∏–≤—ã ‚Äî –æ–±—ä–µ–∫—Ç—ã —Ç–∏–ø–∞ <i>System.Array</i>.
- –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å—Å–∏–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤, —É–ø—Ä–æ—â–∞—é—â–∏—Ö —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É, –ø–æ–∏—Å–∫, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö.
