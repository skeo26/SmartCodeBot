<b>Что такое LinkedList?</b>

<code>LinkedList</code> — это структура данных, состоящая из последовательных элементов, каждый из которых содержит данные и ссылку на следующий элемент в списке. В отличие от массива или списка, элементы в <code>LinkedList</code> не хранятся в непрерывной области памяти, а распределяются по памяти. Это позволяет эффективно вставлять и удалять элементы в произвольных местах списка.

<b>Как работает LinkedList?</b>

Каждый элемент в <code>LinkedList</code> называется узлом (Node), и каждый узел содержит:
1. <b>Данные</b> — значения, которые хранятся в списке.
2. <b>Ссылку на следующий узел</b> — указатель на следующий элемент списка.

<code>LinkedList</code> в C# реализован в классе <code>System.Collections.Generic.LinkedList&lt;T&gt;</code>, где <code>T</code> — это тип данных, хранимый в списке.

<b>Основные операции с LinkedList:</b>
- Добавление элементов в начало, конец или в середину списка.
- Удаление элементов.
- Поиск элементов.

<b>Основные методы для работы с LinkedList:</b>
1. <code>AddFirst(T value)</code> — добавляет элемент в начало списка.
2. <code>AddLast(T value)</code> — добавляет элемент в конец списка.
3. <code>AddAfter(LinkedListNode&lt;T&gt; node, T value)</code> — добавляет элемент после указанного узла.
4. <code>AddBefore(LinkedListNode&lt;T&gt; node, T value)</code> — добавляет элемент перед указанным узлом.
5. <code>Remove(T value)</code> — удаляет первый узел, содержащий заданное значение.
6. <code>RemoveFirst()</code> — удаляет первый узел в списке.
7. <code>RemoveLast()</code> — удаляет последний узел в списке.
8. <code>Find(T value)</code> — находит первый узел, содержащий заданное значение.

<b>Пример создания LinkedList:</b>
<pre><code>LinkedList&lt;int&gt; numbers = new LinkedList&lt;int&gt;();
numbers.AddFirst(1);   // Добавляем 1 в начало
numbers.AddLast(2);    // Добавляем 2 в конец
numbers.AddLast(3);    // Добавляем 3 в конец
</code></pre>

<b>Итерация по элементам LinkedList:</b>
Для перебора всех элементов списка можно использовать цикл <code>foreach</code>.

<pre><code>foreach (int number in numbers)
{
    Console.WriteLine(number);
}
// Вывод:
// 1
// 2
// 3
</code></pre>

<b>Пример добавления элементов в середину списка:</b>
<pre><code>LinkedListNode&lt;int&gt; node = numbers.Find(2); // Находим узел, содержащий 2
numbers.AddAfter(node, 4);  // Добавляем 4 после узла с 2
numbers.AddBefore(node, 5); // Добавляем 5 перед узлом с 2
</code></pre>

<b>Пример удаления элементов:</b>
<pre><code>numbers.Remove(2);     // Удаляем первый узел, содержащий 2
numbers.RemoveFirst();   // Удаляем первый элемент
numbers.RemoveLast();    // Удаляем последний элемент
</code></pre>

<b>Итог:</b>
<code>LinkedList</code> — это полезная структура данных, когда нужно часто добавлять или удалять элементы в произвольных местах коллекции. В отличие от массива или списка, элементы в <code>LinkedList</code> могут быть добавлены и удалены без необходимости перемещать другие элементы, что делает его более эффективным для определенных задач.
