<b>–ö–æ–ª–ª–µ–∫—Ü–∏—è List –≤ C#</b>

–í —è–∑—ã–∫–µ C# –∫–æ–ª–ª–µ–∫—Ü–∏—è <b>List</b> –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—è—Ç—å —Å–≤–æ–π —Ä–∞–∑–º–µ—Ä –∏ —Ö—Ä–∞–Ω–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –ª—é–±–æ–≥–æ —Ç–∏–ø–∞. –û–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –∏–º—ë–Ω <code>System.Collections.Generic</code>.

<b>üìå –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ List:</b>

–ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å –∏ –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã.

–ú–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é —ë–º–∫–æ—Å—Ç—å –∏–ª–∏ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–ø–∏—Å–∫—É —Ä–∞—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

–≠–ª–µ–º–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∏–Ω–¥–µ–∫—Å—É, –∫–∞–∫ –≤ –º–∞—Å—Å–∏–≤–µ.

<b>üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞:</b>

<pre><code>using System.Collections.Generic; 
List&lt;int&gt; numbers = new List&lt;int&gt;();</code></pre>
<b>‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã List:</b>

<code>Add(item)</code> ‚Äì –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞.

<code>Remove(item)</code> ‚Äì —É–¥–∞–ª—è–µ—Ç –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞.

<code>RemoveAt(index)</code> ‚Äì —É–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É.

<code>Clear()</code> ‚Äì –æ—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫.

<code>Contains(item)</code> ‚Äì –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ.

<code>Insert(index, item)</code> ‚Äì –≤—Å—Ç–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É.

<code>Count</code> ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.

<code>Sort()</code> ‚Äì —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã.

<code>IndexOf(item)</code> ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.

<b>üìã –ü—Ä–∏–º–µ—Ä 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥</b>

<pre><code>List&lt;string&gt; names = new List&lt;string&gt;(); names.Add("Alice"); names.Add("Bob"); foreach (string name in names) { Console.WriteLine(name); }</code></pre>
<b>üìã –ü—Ä–∏–º–µ—Ä 2: –£–¥–∞–ª–µ–Ω–∏–µ –∏ –≤—Å—Ç–∞–≤–∫–∞</b>

<pre><code>List&lt;int&gt; scores = new List&lt;int&gt;() { 90, 80, 70 }; scores.Remove(80); // —É–¥–∞–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 80 scores.Insert(1, 85); // –≤—Å—Ç–∞–≤–ª—è–µ—Ç 85 –Ω–∞ –∏–Ω–¥–µ–∫—Å 1 foreach (int score in scores) { Console.WriteLine(score); }</code></pre>
<b>üìã –ü—Ä–∏–º–µ—Ä 3: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –ø–æ–∏—Å–∫</b>

<pre><code>List&lt;int&gt; numbers = new List&lt;int&gt;() { 3, 1, 4, 2 }; numbers.Sort(); // —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é if (numbers.Contains(3)) { Console.WriteLine("–°–ø–∏—Å–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç 3"); } int index = numbers.IndexOf(4); Console.WriteLine("–ò–Ω–¥–µ–∫—Å 4: " + index);</code></pre>
<b>üìò –ó–∞–∫–ª—é—á–µ–Ω–∏–µ:</b>
–ö–æ–ª–ª–µ–∫—Ü–∏—è <code>List</code> ‚Äî —ç—Ç–æ –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –±—ã—Å—Ç—Ä–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –Ω–∏–º–∏. –û–Ω–∞ —É–¥–æ–±–Ω–µ–µ –º–∞—Å—Å–∏–≤–æ–≤ –≤ —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞—Ä–∞–Ω–µ–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ –∏–ª–∏ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è.