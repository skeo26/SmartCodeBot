<b>Что такое абстракция?</b>

Абстракция в объектно-ориентированном программировании — это процесс скрытия сложных деталей реализации и предоставления только нужного интерфейса для взаимодействия с объектами. Она позволяет работать с объектами на более высоком уровне, не беспокоясь о внутренней реализации.

<b>Ключевые особенности:</b>
- Сокрытие внутренней реализации
- Работа с объектами через интерфейсы или абстрактные классы
- Позволяет создавать общее представление о поведении объектов, не вдаваясь в детали

<b>Как реализуется абстракция?</b>

1. <b>Абстрактные классы</b> — классы, которые не могут быть созданы напрямую, а предназначены для того, чтобы быть базой для других классов.
2. <b>Интерфейсы</b> — контракты, которые классы должны реализовывать.

<b>Пример абстрактного класса:</b>
<pre><code>abstract class Animal
{
    public abstract void Speak(); // Абстрактный метод

    public void Sleep() // Обычный метод
    {
        Console.WriteLine("Животное спит");
    }
}

class Dog : Animal
{
    public override void Speak()
    {
        Console.WriteLine("Собака лает");
    }
}
</code></pre>

<b>Использование:</b>
<pre><code>Animal dog = new Dog();
dog.Speak(); // Собака лает
dog.Sleep(); // Животное спит
</code></pre>

<b>Пример интерфейса:</b>
<pre><code>interface IDrawable
{
    void Draw(); // Метод интерфейса
}

class Circle : IDrawable
{
    public void Draw()
    {
        Console.WriteLine("Рисуем круг");
    }
}
</code></pre>

<b>Использование:</b>
<pre><code>IDrawable drawable = new Circle();
drawable.Draw(); // Рисуем круг
</code></pre>

<b>Преимущества абстракции:</b>
- Уменьшение сложности программы
- Разделение интерфейса и реализации
- Возможность изменения реализации без изменения интерфейса
- Упрощение взаимодействия с объектами

<b>Итог:</b>
Абстракция позволяет разработчику работать с концептуальными объектами, скрывая их внутреннюю сложность. Это способствует улучшению структуры программы и снижению сложности её поддержки.
