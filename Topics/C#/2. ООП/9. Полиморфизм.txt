<b>Что такое полиморфизм?</b>

Полиморфизм — это способность объектов разных типов реагировать на одинаковые сообщения (методы) по-разному. В C# полиморфизм обычно реализуется с помощью наследования и интерфейсов.

<b>Виды полиморфизма:</b>
1. <b>Полиморфизм времени компиляции</b> (методная перегрузка)
2. <b>Полиморфизм времени выполнения</b> (переопределение методов)

<b>Полиморфизм времени компиляции:</b>

Этот вид полиморфизма достигается через перегрузку методов. Когда несколько методов с одинаковым именем, но разными параметрами выполняют разные действия.

<b>Пример:</b>
<pre><code>class MathHelper
{
    public int Add(int a, int b)
    {
        return a + b;
    }

    public double Add(double a, double b)
    {
        return a + b;
    }
}
</code></pre>

<b>Использование:</b>
<pre><code>MathHelper helper = new MathHelper();
Console.WriteLine(helper.Add(2, 3));       // Вызов метода для int
Console.WriteLine(helper.Add(2.5, 3.7));   // Вызов метода для double
</code></pre>

<b>Полиморфизм времени выполнения:</b>

Этот вид полиморфизма используется с наследованием, когда метод в базовом классе переопределяется в производном.

<b>Пример:</b>
<pre><code>class Animal
{
    public virtual void Speak()
    {
        Console.WriteLine("Животное издает звук");
    }
}

class Dog : Animal
{
    public override void Speak()
    {
        Console.WriteLine("Собака лает");
    }
}
</code></pre>

<b>Использование:</b>
<pre><code>Animal myAnimal = new Dog();
myAnimal.Speak(); // Собака лает
</code></pre>

Здесь метод <code>Speak()</code> выполняется по-разному в зависимости от типа объекта, на котором он вызывается.

<b>Полиморфизм с интерфейсами:</b>

Полиморфизм также может быть реализован через интерфейсы. Все классы, которые реализуют интерфейс, могут использовать методы этого интерфейса.

<b>Пример:</b>
<pre><code>interface IShape
{
    void Draw();
}

class Circle : IShape
{
    public void Draw()
    {
        Console.WriteLine("Рисуем круг");
    }
}

class Square : IShape
{
    public void Draw()
    {
        Console.WriteLine("Рисуем квадрат");
    }
}
</code></pre>

<b>Использование:</b>
<pre><code>IShape shape1 = new Circle();
IShape shape2 = new Square();
shape1.Draw(); // Рисуем круг
shape2.Draw(); // Рисуем квадрат
</code></pre>

<b>Итог:</b>
Полиморфизм позволяет уменьшить зависимость кода от конкретных классов и сделать программу более гибкой, расширяемой и удобной для изменения.
