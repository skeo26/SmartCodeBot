Question: Какой из следующих подходов подходит для последовательного выполнения зависимых асинхронных операций?
Options:
- Task.WhenAll
- Task.Run
- Цепочка await вызовов
- Thread.Start
Explanation: Для последовательного выполнения зависимых операций используется цепочка await вызовов.
CorrectAnswerIndex: 2

Question: Что делает метод Task.WhenAll?
Options:
- Завершает первую задачу
- Запускает задачи по очереди
- Ожидает завершения всех переданных задач
- Завершает поток
Explanation: Task.WhenAll ожидает завершения всех задач, запущенных параллельно.
CorrectAnswerIndex: 2

Question: Как правильно обрабатывать исключения в асинхронных методах?
Options:
- Использовать try-catch с Task.Run
- Игнорировать await
- Использовать try-catch с await
- Использовать using
Explanation: Исключения из асинхронных методов перехватываются через try-catch и await.
CorrectAnswerIndex: 2

Question: Что произойдет, если не использовать await при вызове асинхронного метода, выбрасывающего исключение?
Options:
- Исключение не произойдет
- Исключение произойдёт немедленно
- Исключение будет проигнорировано до await
- Метод выполнится быстрее
Explanation: Без await исключение не будет перехвачено до тех пор, пока не произойдёт await или .Result.
CorrectAnswerIndex: 2

Question: Как реализовать тайм-аут ожидания асинхронной операции?
Options:
- Использовать Thread.Sleep
- Использовать Task.WhenAny с задержкой
- Использовать async void
- Использовать Console.ReadLine
Explanation: Task.WhenAny позволяет задать тайм-аут, сравнивая завершение основной задачи с задержкой.
CorrectAnswerIndex: 1

Question: Почему следует избегать async void вне обработки событий?
Options:
- Такие методы слишком медленные
- Невозможно использовать CancellationToken
- Нельзя отследить завершение и обработать исключения
- Нельзя использовать await
Explanation: async void не позволяет отследить завершение задачи или перехватить исключение.
CorrectAnswerIndex: 2

Question: Какой тип результата возвращает метод TaskWithTimeoutAsync?
Options:
- Task
- void
- string
- bool
Explanation: Метод возвращает Task<string>, значит — результатом будет строка.
CorrectAnswerIndex: 2

Question: Что произойдёт, если задача не завершится до истечения тайм-аута?
Options:
- Вернётся значение null
- Произойдет исключение TimeoutException
- Программа завершится
- Задача будет завершена принудительно
Explanation: В таком случае будет выброшено исключение TimeoutException.
CorrectAnswerIndex: 1

Question: Какой подход лучше всего подходит для параллельного запуска нескольких независимых задач?
Options:
- Thread.Start
- Последовательные await
- Task.WhenAll
- async void
Explanation: Task.WhenAll позволяет выполнять несколько независимых задач одновременно.
CorrectAnswerIndex: 2

Question: Когда допустимо использовать async void?
Options:
- Всегда, это рекомендуемый стиль
- Только при работе с тайм-аутами
- В обработчиках событий, например, для кнопок
- Никогда
Explanation: async void допустим для событий (например, Click), но его следует избегать в других случаях.
CorrectAnswerIndex: 2
