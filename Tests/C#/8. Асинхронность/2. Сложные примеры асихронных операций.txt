Question: Для чего используется HttpClient в асинхронных операциях?
Options:
- Для отправки синхронных HTTP-запросов
- Для создания файлов
- Для выполнения асинхронных HTTP-запросов к веб-API
- Для запуска локального сервера
Explanation: HttpClient позволяет отправлять асинхронные запросы к удалённым серверам.
CorrectAnswerIndex: 2

Question: Как обеспечить параллельную обработку нескольких файлов асинхронно?
Options:
- Использовать foreach без await
- Использовать Select с асинхронными лямбдами и Task.WhenAll
- Использовать обычный for
- Использовать Task.Run внутри цикла
Explanation: Асинхронную обработку удобно реализовать через Select и ожидание всех задач с помощью Task.WhenAll.
CorrectAnswerIndex: 1

Question: Что произойдет, если во время выполнения метода с CancellationToken будет вызван token.Cancel()?
Options:
- Операция завершится успешно
- Операция прервется и будет выброшено исключение
- Операция будет выполняться до конца
- Операция автоматически перезапустится
Explanation: При отмене токена операция должна прерваться, возможна генерация исключения OperationCanceledException.
CorrectAnswerIndex: 1

Question: Какой метод используется для ожидания завершения нескольких асинхронных операций?
Options:
- Task.WhenAny
- Task.WaitAll
- Task.WhenAll
- Task.ContinueWith
Explanation: Task.WhenAll позволяет ожидать завершение всех переданных задач.
CorrectAnswerIndex: 2

Question: Что делает метод EnsureSuccessStatusCode в контексте HTTP-запроса?
Options:
- Завершает программу
- Проверяет, что HTTP-ответ успешный
- Повторяет запрос
- Ожидает завершение всех запросов
Explanation: EnsureSuccessStatusCode выбрасывает исключение, если HTTP-ответ указывает на ошибку.
CorrectAnswerIndex: 1

Question: Как безопасно обрабатывать отмену асинхронной операции?
Options:
- Игнорировать CancellationToken
- Проверять token.IsCancellationRequested внутри метода
- Останавливать задачу через Thread.Abort
- Перезапускать задачу вручную
Explanation: Нужно проверять свойство IsCancellationRequested и корректно завершать выполнение метода.
CorrectAnswerIndex: 1

Question: Что возвращает метод ProcessDataAsync в примере асинхронной обработки данных?
Options:
- Список строк, приведённых к верхнему регистру
- Одну строку
- Массив целых чисел
- Ничего (void)
Explanation: ProcessDataAsync возвращает список строк, где каждая строка преобразована в верхний регистр.
CorrectAnswerIndex: 0

Question: Для чего используется очередь сообщений в асинхронной обработке?
Options:
- Для создания HTTP-запросов
- Для последовательной обработки сообщений
- Для выполнения параллельных HTTP-запросов
- Для загрузки файлов
Explanation: Асинхронная очередь позволяет по одному обрабатывать сообщения без блокировки основного потока.
CorrectAnswerIndex: 1

Question: Что произойдет, если при обработке очереди сообщений будет отменён CancellationToken?
Options:
- Очередь обработается до конца
- Процесс обработки прервется
- Очередь очистится автоматически
- Будет выброшено исключение FileNotFoundException
Explanation: Если токен отменён, обработка сообщений будет прервана.
CorrectAnswerIndex: 1

Question: Какой метод обеспечивает паузу в асинхронной задаче без блокировки потока?
Options:
- Thread.Sleep
- Task.Wait
- Task.Delay
- WaitHandle.WaitOne
Explanation: Task.Delay позволяет организовать задержку без блокировки текущего потока.
CorrectAnswerIndex: 2
