Question: Что означает ключевое слово async перед методом?
Options:
- Метод будет выполняться в новом процессе
- Метод обязательно содержит await
- Метод является асинхронным и может использовать await
- Метод выполняется синхронно, но с задержкой
Explanation: async помечает метод как асинхронный, позволяя использовать await внутри него.
CorrectAnswerIndex: 2

Question: Что делает ключевое слово await?
Options:
- Приостанавливает выполнение метода навсегда
- Выполняет метод в фоновом потоке
- Ожидает завершения асинхронной операции
- Блокирует основной поток
Explanation: await приостанавливает выполнение метода до завершения задачи, не блокируя поток.
CorrectAnswerIndex: 2

Question: Какой тип обычно возвращает асинхронный метод?
Options:
- void
- bool
- Task или Task<T>
- string
Explanation: Асинхронный метод обычно возвращает Task или Task<T>.
CorrectAnswerIndex: 2

Question: Как вызвать асинхронный метод внутри другого асинхронного метода?
Options:
- Просто вызвать метод без await
- Использовать Task.Run
- Использовать await перед вызовом
- Поместить вызов в try-catch
Explanation: Внутри асинхронного метода другой асинхронный метод вызывается с await.
CorrectAnswerIndex: 2

Question: Зачем использовать Task.WhenAll?
Options:
- Для запуска методов последовательно
- Для ожидания завершения всех указанных задач
- Для остановки всех задач
- Для отмены задач
Explanation: Task.WhenAll позволяет ждать завершения нескольких задач одновременно.
CorrectAnswerIndex: 1

Question: Что произойдёт, если в асинхронном методе возникнет исключение?
Options:
- Программа завершится с ошибкой
- Исключение проигнорируется
- Исключение можно обработать через try-catch
- Метод будет выполнен повторно
Explanation: Исключения в async-методах можно обрабатывать с помощью try-catch.
CorrectAnswerIndex: 2

Question: Как асинхронность влияет на основной поток?
Options:
- Он приостанавливается
- Он блокируется
- Он продолжает работу, не дожидаясь завершения задач
- Он завершается
Explanation: Асинхронность не блокирует основной поток, позволяя ему продолжать выполнение.
CorrectAnswerIndex: 2

Question: Можно ли использовать await без async?
Options:
- Да, в любом месте
- Нет, только внутри методов с async
- Только в методах Main
- Только в конструкторах
Explanation: await можно использовать только внутри методов, помеченных как async.
CorrectAnswerIndex: 1

Question: Для чего применяется File.ReadAllTextAsync?
Options:
- Для записи текста в файл
- Для синхронного чтения файла
- Для асинхронного чтения содержимого файла
- Для удаления файла
Explanation: Метод File.ReadAllTextAsync выполняет чтение файла без блокировки потока.
CorrectAnswerIndex: 2

Question: Что нужно использовать для обработки нескольких асинхронных операций одновременно?
Options:
- async foreach
- Task.Wait
- Task.WhenAll
- await foreach
Explanation: Task.WhenAll позволяет одновременно ждать несколько задач.
CorrectAnswerIndex: 2
