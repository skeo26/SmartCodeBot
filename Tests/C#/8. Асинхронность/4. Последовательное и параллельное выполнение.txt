Question: Что происходит при последовательном выполнении задач?
Options:
- Все задачи запускаются одновременно
- Каждая задача запускается после завершения предыдущей
- Выполняется только первая задача
- Все задачи выполняются в отдельных потоках
Explanation: При последовательном выполнении каждая задача запускается только после завершения предыдущей.
CorrectAnswerIndex: 1

Question: Какой метод используется для параллельного выполнения нескольких задач?
Options:
- Task.Wait
- Task.Run
- Task.WhenAll
- Thread.Sleep
Explanation: Task.WhenAll позволяет запускать и ожидать завершения нескольких задач параллельно.
CorrectAnswerIndex: 2

Question: Когда следует использовать последовательное выполнение?
Options:
- Когда задачи не зависят друг от друга
- Когда задачи зависят от результатов предыдущих
- Когда все задачи одинаковые
- Когда важно завершить всё как можно быстрее
Explanation: Если задача зависит от результата предыдущей, их нужно выполнять последовательно.
CorrectAnswerIndex: 1

Question: Что произойдёт, если использовать Task.Result в параллельной задаче?
Options:
- Задача выполнится быстрее
- Выполнение может заблокироваться
- Исключение будет проигнорировано
- Результат будет получен мгновенно
Explanation: Использование Task.Result может привести к блокировке потока, особенно если задача ещё не завершена.
CorrectAnswerIndex: 1

Question: Как можно реализовать тайм-аут для асинхронной операции?
Options:
- Через Thread.Sleep
- Через CancellationToken
- С помощью Task.WhenAny и Task.Delay
- Через Task.Run
Explanation: Task.WhenAny и Task.Delay позволяют реализовать тайм-аут ожидания задачи.
CorrectAnswerIndex: 2

Question: Почему важно учитывать зависимости между задачами при выборе способа выполнения?
Options:
- Чтобы не использовать async
- Чтобы задачи не конфликтовали
- Чтобы выбрать подходящий способ — последовательный или параллельный
- Чтобы задачи были быстрее
Explanation: Понимание зависимостей позволяет правильно организовать выполнение — последовательно или параллельно.
CorrectAnswerIndex: 2

Question: Что произойдёт при вызове ExecuteParallelTasksAsync?
Options:
- Задачи выполнятся по очереди
- Выполнится только одна задача
- Все задачи начнут выполняться одновременно
- Метод не скомпилируется
Explanation: Все задачи начнут выполняться одновременно и будут ожидаться с помощью Task.WhenAll.
CorrectAnswerIndex: 2

Question: Какой подход использовать, если одна задача должна завершиться перед началом следующей?
Options:
- Task.WhenAll
- await поочерёдно
- Task.Run
- Thread.Start
Explanation: await поочерёдно позволяет выполнить задачи последовательно.
CorrectAnswerIndex: 1

Question: Зачем может использоваться Task.WhenAny?
Options:
- Чтобы завершить выполнение всех задач
- Чтобы выбрать любую задачу
- Для реализации тайм-аутов или реакции на первую завершившуюся задачу
- Чтобы параллелить задачи
Explanation: Task.WhenAny используется для ожидания первой завершившейся задачи, например, для реализации тайм-аутов.
CorrectAnswerIndex: 2

Question: Что лучше использовать для управления приоритетами задач?
Options:
- Task.WhenAll
- Последовательное выполнение с await
- Параллельное выполнение
- async void
Explanation: Последовательное выполнение позволяет контролировать порядок задач в зависимости от их приоритета.
CorrectAnswerIndex: 1
