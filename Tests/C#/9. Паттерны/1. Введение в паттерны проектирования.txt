Question: Что такое паттерны проектирования?
Options:
- Это инструкции компилятора
- Это готовые библиотеки
- Это проверенные решения распространённых задач проектирования
- Это типы переменных
Explanation: Паттерны проектирования — это проверенные, многократно применяемые решения типичных задач при проектировании программ.
CorrectAnswerIndex: 2

Question: Какая основная цель паттернов проектирования?
Options:
- Увеличение количества кода
- Повышение производительности процессора
- Упрощение архитектуры и решение типовых задач
- Обеспечение совместимости с другими языками
Explanation: Основная цель паттернов — сделать архитектуру более читаемой, гибкой и повторно используемой.
CorrectAnswerIndex: 2

Question: К какой категории относится паттерн «Фабрика»?
Options:
- Поведенческий
- Структурный
- Порождающий
- Универсальный
Explanation: «Фабрика» относится к порождающим паттернам, так как управляет созданием объектов.
CorrectAnswerIndex: 2

Question: Что относится к структурным паттернам?
Options:
- Одиночка
- Адаптер
- Команда
- Наблюдатель
Explanation: Адаптер — это структурный паттерн, позволяющий совместить несовместимые интерфейсы.
CorrectAnswerIndex: 1

Question: Когда стоит применять паттерны проектирования?
Options:
- Всегда, даже для простых задач
- Только в больших проектах
- Когда нужно решить распространённую архитектурную проблему
- Когда нужно ускорить программу
Explanation: Паттерны применяются, когда задача повторяется и может быть решена типичным способом.
CorrectAnswerIndex: 2

Question: Что из перечисленного относится к поведенческим паттернам?
Options:
- Стратегия
- Фабрика
- Декоратор
- Одиночка
Explanation: Стратегия — поведенческий паттерн, управляющий выбором алгоритма во время выполнения.
CorrectAnswerIndex: 0

Question: Зачем делить паттерны на категории?
Options:
- Чтобы упростить выбор подходящего паттерна по ситуации
- Для сортировки в документации
- Это обязательное требование языка C#
- Для ускорения работы компилятора
Explanation: Категории помогают лучше понимать, в каких задачах применять тот или иной паттерн.
CorrectAnswerIndex: 0

Question: Как паттерны помогают при сопровождении кода?
Options:
- Увеличивают производительность
- Повышают читаемость и повторное использование
- Делают код менее гибким
- Требуют больше времени на компиляцию
Explanation: Паттерны упрощают понимание кода и делают его легко расширяемым.
CorrectAnswerIndex: 1

Question: Какой паттерн уменьшает связность компонентов?
Options:
- Команда
- Абстрактная фабрика
- Декоратор
- Все перечисленные
Explanation: Все эти паттерны помогают снизить зависимость между компонентами системы.
CorrectAnswerIndex: 3

Question: Что НЕ является преимуществом использования паттернов?
Options:
- Повышение читаемости кода
- Повышение гибкости архитектуры
- Увеличение связности компонентов
- Повторное использование решений
Explanation: Паттерны как раз уменьшают связность между частями системы.
CorrectAnswerIndex: 2
