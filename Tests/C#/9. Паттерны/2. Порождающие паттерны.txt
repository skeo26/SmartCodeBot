Question: Что такое порождающие паттерны проектирования?
Options:
- Паттерны, которые управляют созданием объектов
- Паттерны, которые изменяют существующие объекты
- Паттерны, которые разделяют объекты по категориям
- Паттерны, которые регулируют работу потоков
Explanation: Порождающие паттерны фокусируются на создании объектов и управлении этим процессом.
CorrectAnswerIndex: 0

Question: Какой из паттернов позволяет создавать объекты без указания их конкретных классов?
Options:
- Строитель
- Одиночка
- Фабричный метод
- Прототип
Explanation: Фабричный метод позволяет создавать объекты, не указывая конкретные классы создаваемых объектов.
CorrectAnswerIndex: 2

Question: Что делает абстрактная фабрика?
Options:
- Создает один объект
- Создает семейства взаимосвязанных объектов
- Создает объекты без указания их типа
- Клонирует существующие объекты
Explanation: Абстрактная фабрика создает семейства взаимосвязанных объектов, используя общий интерфейс.
CorrectAnswerIndex: 1

Question: В чем заключается принцип работы паттерна Одиночка (Singleton)?
Options:
- Он позволяет создать объект только один раз в течение всей работы программы
- Он создает объекты с несколькими экземплярами
- Он управляет связью между объектами
- Он предоставляет возможность клонировать объекты
Explanation: Одиночка гарантирует, что класс имеет только один экземпляр.
CorrectAnswerIndex: 0

Question: Что делает паттерн Строитель?
Options:
- Управляет созданием объектов с несколькими параметрами
- Обеспечивает создание объектов без указания их типа
- Разделяет создание объекта и его представление
- Клонирует объекты
Explanation: Строитель отделяет процесс создания сложного объекта от его представления, что позволяет создавать различные представления одного объекта.
CorrectAnswerIndex: 2

Question: В чем суть паттерна Прототип?
Options:
- Он создает объекты путем их клонирования
- Он разделяет создание объектов и их представления
- Он предоставляет доступ к единственному экземпляру объекта
- Он управляет зависимостями между объектами
Explanation: Прототип позволяет создавать новые объекты путем клонирования существующих объектов.
CorrectAnswerIndex: 0

Question: Когда рекомендуется использовать порождающие паттерны?
Options:
- Когда нужно разделить логику обработки ошибок
- Когда создание объектов требует гибкости и абстракции
- Когда объекты должны быть независимы от их конкретных классов
- Когда необходимо использовать сложные алгоритмы
Explanation: Порождающие паттерны используются, когда создание объектов требует гибкости и абстракции.
CorrectAnswerIndex: 1

Question: Какой из этих паттернов помогает скрыть детали реализации создания объектов?
Options:
- Одиночка
- Строитель
- Абстрактная фабрика
- Прототип
Explanation: Абстрактная фабрика скрывает детали реализации создания объектов, предоставляя интерфейс для создания семейства объектов.
CorrectAnswerIndex: 2

Question: В чем различие между фабричным методом и абстрактной фабрикой?
Options:
- Фабричный метод создаёт один объект, а абстрактная фабрика создаёт семью объектов
- Абстрактная фабрика не использует интерфейсы
- Фабричный метод не поддерживает наследование
- Различие нет, это один и тот же паттерн
Explanation: Фабричный метод создаёт один объект, а абстрактная фабрика — целое семейство взаимосвязанных объектов.
CorrectAnswerIndex: 0

Question: Как паттерн Одиночка может быть полезен?
Options:
- Для создания множества объектов с одинаковыми параметрами
- Для ограничения количества экземпляров определённого класса
- Для упрощения работы с потоками
- Для управления зависимостями между компонентами
Explanation: Одиночка полезен для создания класса, у которого может быть только один экземпляр в течение всей работы приложения.
CorrectAnswerIndex: 1
