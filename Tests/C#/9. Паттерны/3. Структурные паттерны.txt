Question: Что делает структурный паттерн проектирования?
Options:
- Управляет процессом создания объектов
- Разделяет абстракцию и реализацию
- Решает задачи организации классов и объектов
- Упрощает работу с асинхронными задачами
Explanation: Структурные паттерны решают задачи, связанные с организацией классов и объектов, улучшая их взаимодействие.
CorrectAnswerIndex: 2

Question: Какой паттерн позволяет объектам с несовместимыми интерфейсами работать вместе?
Options:
- Мост
- Адаптер
- Декоратор
- Компоновщик
Explanation: Паттерн Адаптер позволяет объектам с несовместимыми интерфейсами работать вместе.
CorrectAnswerIndex: 1

Question: В чем заключается принцип работы паттерна Мост?
Options:
- Он разделяет абстракцию и реализацию, позволяя их изменять независимо
- Он динамически добавляет функциональность объектам
- Он создает объекты, не указывая конкретные классы
- Он помогает группировать объекты в иерархические структуры
Explanation: Паттерн Мост разделяет абстракцию и реализацию, позволяя изменять их независимо.
CorrectAnswerIndex: 0

Question: Что делает паттерн Компоновщик?
Options:
- Он добавляет функциональность объектам
- Он разделяет абстракцию и реализацию
- Он позволяет сгруппировать объекты в древовидные структуры и работать с ними как с единым объектом
- Он упрощает взаимодействие с подсистемой
Explanation: Паттерн Компоновщик позволяет сгруппировать объекты в древовидные структуры и работать с ними как с единым объектом.
CorrectAnswerIndex: 2

Question: Какой паттерн позволяет динамически добавлять функциональность объектам?
Options:
- Адаптер
- Мост
- Декоратор
- Фасад
Explanation: Паттерн Декоратор позволяет динамически добавлять функциональность объектам.
CorrectAnswerIndex: 2

Question: Что делает паттерн Фасад?
Options:
- Он упрощает интерфейс для работы с подсистемой
- Он разделяет абстракцию и реализацию
- Он позволяет сгруппировать объекты в единый объект
- Он управляет созданием объектов
Explanation: Паттерн Фасад упрощает интерфейс для работы с подсистемой, предоставляя единую точку взаимодействия.
CorrectAnswerIndex: 0

Question: Когда рекомендуется использовать структурные паттерны?
Options:
- Когда необходимо улучшить взаимодействие между объектами
- Когда требуется скрыть детали реализации создания объектов
- Когда нужно обеспечить возможность расширения объектов
- Когда необходимо уменьшить количество объектов в программе
Explanation: Структурные паттерны используются, когда необходимо улучшить взаимодействие между объектами или сгруппировать их для более удобного использования.
CorrectAnswerIndex: 0

Question: В чем отличие паттернов Адаптер и Декоратор?
Options:
- Адаптер работает с несовместимыми интерфейсами, а Декоратор — добавляет функциональность объектам
- Адаптер упрощает интерфейс, а Декоратор добавляет сложность
- Адаптер позволяет клонировать объекты, а Декоратор — изменяет их поведение
- Различия нет, это один и тот же паттерн
Explanation: Адаптер позволяет объектам с несовместимыми интерфейсами работать вместе, а Декоратор добавляет функциональность объектам.
CorrectAnswerIndex: 0

Question: Когда следует использовать паттерн Компоновщик?
Options:
- Когда необходимо создать один объект из нескольких взаимозависимых частей
- Когда нужно добавлять функциональность объектам
- Когда нужно группировать объекты в иерархические структуры
- Когда необходимо создать один экземпляр объекта
Explanation: Паттерн Компоновщик используется, когда необходимо сгруппировать объекты в иерархические структуры и работать с ними как с единым объектом.
CorrectAnswerIndex: 2

Question: Какой из паттернов разделяет абстракцию и реализацию?
Options:
- Мост
- Фасад
- Адаптер
- Декоратор
Explanation: Паттерн Мост разделяет абстракцию и реализацию, позволяя их изменять независимо.
CorrectAnswerIndex: 0
