Question: Что такое полиморфизм в объектно-ориентированном программировании?
Options:
- Способность объектов разных типов реагировать на одинаковые сообщения по-разному
- Возможность создавать несколько классов с одинаковыми методами
- Использование одного метода в разных классах
- Способность переменной принимать значения разных типов
Explanation: Полиморфизм позволяет объектам разных типов реагировать на одинаковые методы по-разному.
CorrectAnswerIndex: 0

Question: Какой вид полиморфизма реализуется с помощью перегрузки методов?
Options:
- Полиморфизм времени компиляции
- Полиморфизм времени выполнения
- Полиморфизм с интерфейсами
- Полиморфизм с наследованием
Explanation: Перегрузка методов — это пример полиморфизма времени компиляции.
CorrectAnswerIndex: 0

Question: Что такое полиморфизм времени выполнения?
Options:
- Метод с одинаковыми параметрами выполняет разные действия
- Методы в производных классах могут переопределять методы базового класса
- Объекты могут изменять своё поведение на основе входных данных
- Методы интерфейсов могут выполняться в зависимости от контекста
Explanation: Полиморфизм времени выполнения позволяет переопределить метод в производном классе и вызвать его в зависимости от типа объекта.
CorrectAnswerIndex: 1

Question: Какой из следующих методов является примером полиморфизма с интерфейсами?
Options:
- Метод, который принимает параметры разного типа
- Метод, переопределённый в производном классе
- Метод, который реализует интерфейс
- Метод, вызываемый в разных контекстах
Explanation: Полиморфизм с интерфейсами позволяет объектам различных классов реализовывать один и тот же метод интерфейса.
CorrectAnswerIndex: 2

Question: Что произойдёт, если вызвать метод `Speak()` на объекте типа `Animal`, который на самом деле является объектом типа `Dog`?
Options:
- Будет вызван метод `Speak()` из базового класса `Animal`
- Будет вызван метод `Speak()` из производного класса `Dog`
- Возникнет ошибка компиляции
- Метод не будет найден
Explanation: Будет вызван метод `Speak()` из производного класса `Dog`, так как объект фактически является экземпляром класса `Dog`.
CorrectAnswerIndex: 1

Question: Какой тип полиморфизма используется в примере выше? 
Code:
interface IShape { void Draw(); }
class Circle : IShape 
{ 
   public void Draw() { 
       Console.WriteLine("Рисуем круг"); 
   } 
}
class Square : IShape { 
   public void Draw() { 
       Console.WriteLine("Рисуем квадрат"); 
   } 
}
Options:
- Полиморфизм с интерфейсами
- Полиморфизм времени выполнения
- Полиморфизм времени компиляции
- Полиморфизм с наследованием
Explanation: Пример демонстрирует полиморфизм через интерфейс `IShape`.
CorrectAnswerIndex: 0

Question: Что произойдёт, если вызвать метод `Draw()` на объекте типа `IShape`, который на самом деле является объектом типа `Circle`?
Options:
- Будет вызван метод `Draw()` из интерфейса `IShape`
- Будет вызван метод `Draw()` из класса `Circle`
- Будет вызван метод `Draw()` из класса `Square`
- Возникнет ошибка компиляции
Explanation: Будет вызван метод `Draw()` из класса `Circle`, так как объект фактически является экземпляром этого класса.
CorrectAnswerIndex: 1

Question: Какой из следующих вариантов является примером полиморфизма времени компиляции?
Options:
- Использование метода с разными параметрами в одном классе
- Переопределение метода в дочернем классе
- Использование интерфейса для вызова метода
- Замена одного типа объекта на другой в программе
Explanation: Полиморфизм времени компиляции достигается с помощью перегрузки методов с разными параметрами.
CorrectAnswerIndex: 0

Question: Какой из следующих примеров использует полиморфизм времени выполнения?
Options:
- Переопределение метода в производном классе
- Использование конструктора для создания объекта
- Использование разных методов в одном классе
- Выбор метода на основе типа объекта во время работы программы
Explanation: Полиморфизм времени выполнения позволяет выбирать метод на основе типа объекта, как в примере с переопределённым методом `Speak()`.
CorrectAnswerIndex: 3
