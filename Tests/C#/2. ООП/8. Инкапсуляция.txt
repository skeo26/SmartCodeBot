Question: Что такое инкапсуляция в объектно-ориентированном программировании?
Options:
- Наследование от нескольких классов
- Сокрытие внутренней реализации и контроль доступа к данным
- Автоматическая генерация кода
- Возможность перегрузки методов
Explanation: Инкапсуляция — это механизм защиты данных и управления доступом через свойства и модификаторы доступа.
CorrectAnswerIndex: 1

Question: Какой модификатор доступа используется для сокрытия данных внутри класса?
Options:
- public
- protected
- internal
- private
Explanation: Модификатор private скрывает члены класса от внешнего кода.
CorrectAnswerIndex: 3

Question: Что такое свойство (property) в C#?
Options:
- Метод, который ничего не возвращает
- Поле класса с модификатором public
- Интерфейс для безопасного доступа к полям
- Специальный тип данных
Explanation: Свойства позволяют безопасно читать и записывать значения полей, добавляя логику при необходимости.
CorrectAnswerIndex: 2

Question: Что произойдёт, если в поле age установить отрицательное значение, при наличии проверки в set?
Options:
- Возникнет ошибка компиляции
- Значение будет установлено
- Значение не будет установлено
- Программа завершится с ошибкой
Explanation: Проверка внутри set не позволит установить отрицательное значение.
CorrectAnswerIndex: 2

Question: Что обеспечивает использование инкапсуляции?
Options:
- Повышение скорости выполнения
- Упрощение и безопасность работы с объектами
- Возможность создавать несколько экземпляров класса
- Автоматическую сериализацию данных
Explanation: Инкапсуляция помогает контролировать, как и кем используются данные, делая код безопаснее.
CorrectAnswerIndex: 1

Question: Как называется способ задания свойств без явных полей и логики?
Options:
- Интерфейсное программирование
- Абстрактные свойства
- Автоматические свойства
- Делегаты
Explanation: Автоматические свойства позволяют не писать поля вручную, если логика не нужна.
CorrectAnswerIndex: 2

Question: Что делает следующий код? <pre><code>public int Age { get; private set; }</code></pre>
Options:
- Запрещает доступ к Age извне
- Позволяет читать Age, но устанавливать только изнутри класса
- Делает Age доступным только наследникам
- Открывает доступ к Age из любого места
Explanation: set доступен только внутри класса, а get доступен извне.
CorrectAnswerIndex: 1

Question: Что произойдёт, если обратиться к private-полю извне?
Options:
- Поле будет доступно
- Возникнет ошибка компиляции
- Значение автоматически сбросится
- Поле станет public
Explanation: private-поле недоступно вне класса, вызовет ошибку компиляции.
CorrectAnswerIndex: 1

Question: Что из следующего лучше всего демонстрирует инкапсуляцию?
Options:
- Использование sealed-классов
- Использование конструктора без параметров
- Скрытие полей и доступ через свойства
- Использование virtual-методов
Explanation: Скрытие полей и использование свойств — ключевая практика инкапсуляции.
CorrectAnswerIndex: 2

Question: Какой модификатор доступа делает поле доступным только внутри класса и его наследников?
Options:
- public
- internal
- protected
- private
Explanation: protected позволяет использовать поле в текущем и унаследованных классах.
CorrectAnswerIndex: 2
