Question: Что делает метод Parallel.For?
Options:
- Выполняет цикл последовательно
- Выполняет итерации цикла параллельно
- Выполняет одну задачу в фоновом потоке
- Позволяет синхронизировать потоки
Explanation: Метод Parallel.For позволяет выполнять итерации цикла одновременно в нескольких потоках.
CorrectAnswerIndex: 1

Question: Какой результат может дать выполнение следующего кода?
Code:
Parallel.For(0, 10, i => 
{
    Console.WriteLine($"Итерация {i}");
});
Options:
- Вывод чисел от 0 до 9 в случайном порядке
- Ошибку компиляции
- Цикл отработает строго последовательно
- Один и тот же номер итерации будет выведен дважды
Explanation: Итерации выполняются параллельно, поэтому порядок вывода может быть непредсказуемым.
CorrectAnswerIndex: 0

Question: Как работает Parallel.ForEach?
Options:
- Обрабатывает элементы коллекции последовательно
- Использует LINQ для фильтрации
- Выполняет обработку элементов коллекции параллельно
- Останавливает выполнение при первой ошибке
Explanation: Parallel.ForEach обрабатывает каждый элемент коллекции в отдельном потоке, если возможно.
CorrectAnswerIndex: 2

Question: Что делает метод Parallel.Invoke?
Options:
- Выполняет методы один за другим
- Выполняет методы параллельно
- Останавливает все запущенные задачи
- Выполняет методы только в главном потоке
Explanation: Parallel.Invoke запускает несколько делегатов одновременно, если это возможно.
CorrectAnswerIndex: 1

Question: Как остановить выполнение цикла Parallel.For при достижении определённого условия?
Options:
- Использовать return
- Вызвать Thread.Abort()
- Использовать state.Stop()
- Невозможно остановить
Explanation: Через параметр state можно вызвать метод Stop() для остановки цикла.
CorrectAnswerIndex: 2

Question: Как обрабатываются исключения в методах Parallel?
Options:
- Они игнорируются
- Генерируются как обычные исключения
- Объединяются в AggregateException
- Печатаются в консоль
Explanation: Исключения в параллельных операциях объединяются в AggregateException.
CorrectAnswerIndex: 2

Question: Что произойдёт при генерации исключения внутри Parallel.For?
Options:
- Цикл завершится успешно
- Программа завершится аварийно
- Исключение будет обернуто в AggregateException
- Будет выброшено NullReferenceException
Explanation: Все исключения из параллельных потоков объединяются в AggregateException.
CorrectAnswerIndex: 2

Question: Когда следует использовать Parallel.Invoke?
Options:
- Когда нужно выполнить несколько зависимых задач
- Когда нужно выполнить несколько задач последовательно
- Когда нужно выполнить независимые действия параллельно
- Только при использовании async/await
Explanation: Parallel.Invoke эффективен для выполнения нескольких независимых действий одновременно.
CorrectAnswerIndex: 2

Question: Почему порядок вывода в Parallel.For не гарантируется?
Options:
- Метод не работает с консолью
- Используется один поток
- Потоки выполняются в произвольном порядке
- Это особенность компилятора
Explanation: Параллельные итерации выполняются в разных потоках, что нарушает порядок выполнения.
CorrectAnswerIndex: 2

Question: Что будет, если в Parallel.ForEach один из потоков выбросит исключение?
Options:
- Цикл продолжится
- Все потоки остановятся без ошибки
- Будет выброшен AggregateException
- Исключение будет проигнорировано
Explanation: Все исключения из параллельных задач собираются и выбрасываются в виде AggregateException.
CorrectAnswerIndex: 2
