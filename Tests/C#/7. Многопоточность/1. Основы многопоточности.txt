Question: Что делает класс Thread в C#?
Options:
- Создает и управляет асинхронными задачами
- Создает и управляет потоками
- Выполняет параллельные вычисления
- Обрабатывает синхронизацию потоков
Explanation: Класс Thread используется для создания и управления потоками.
CorrectAnswerIndex: 1

Question: Как можно создать поток с использованием класса Thread?
Options:
- Thread thread = new Thread(Worker); thread.Start();
- Thread thread = new Thread(() => Worker()); thread.Run();
- Task.Run(Worker);
- Parallel.For(0, 5, i => Worker());
Explanation: Поток создается через класс Thread с передачей метода и запуском потока через Start().
CorrectAnswerIndex: 0

Question: Чем отличается Task от Thread?
Options:
- Task представляет асинхронную задачу, а Thread — поток
- Task управляет синхронизацией потоков, а Thread выполняет задачи
- Task запускает задачи в параллельных потоках, а Thread — нет
- Task используется только для асинхронных операций, а Thread — для синхронизации
Explanation: Task используется для работы с асинхронными задачами, в то время как Thread — для работы с потоками.
CorrectAnswerIndex: 0

Question: Какой результат будет у следующего кода:
Code:
Task.Run(() => Worker());
void Worker()
{
    Console.WriteLine("Задача в отдельной задаче.");
}
Options:
- Задача в отдельной задаче.
- Задача в отдельном потоке.
- Задача выполнена.
- Ошибка выполнения.
Explanation: Task.Run() выполняет метод Worker() в асинхронной задаче.
CorrectAnswerIndex: 0

Question: Что делает ключевое слово lock в многозадачности?
Options:
- Создает новый поток для задачи
- Синхронизирует доступ к ресурсу между потоками
- Запускает асинхронную задачу
- Разблокирует ресурсы для параллельного использования
Explanation: lock используется для синхронизации доступа к ресурсу, чтобы предотвратить гонки данных.
CorrectAnswerIndex: 1

Question: Как работает метод Parallel.For?
Options:
- Выполняет несколько задач одновременно
- Создает потоки для каждой задачи
- Выполняет одну задачу асинхронно
- Ожидает выполнения всех задач последовательно
Explanation: Parallel.For позволяет выполнять несколько задач одновременно с использованием нескольких потоков.
CorrectAnswerIndex: 0

Question: Какой результат будет у следующего кода:
Code:
Parallel.For(0, 5, i => 
{
    Console.WriteLine($"Задача {i}");
});
Options:
- Задача 0, Задача 1, Задача 2, Задача 3, Задача 4
- Задача 0, Задача 1, Задача 2
- Задача 0, Задача 1, Задача 2, Задача 3, Задача 4 в случайном порядке
- Задача выполнена.
Explanation: Parallel.For выполняет несколько итераций параллельно, выводя задачи в случайном порядке.
CorrectAnswerIndex: 2

Question: Для чего используется async и await в C#?
Options:
- Для управления потоками
- Для синхронизации потоков
- Для работы с асинхронными операциями
- Для параллельного выполнения задач
Explanation: async и await используются для упрощения работы с асинхронными операциями.
CorrectAnswerIndex: 2

Question: Какой результат будет у следующего кода:
Code:
await Task.Delay(1000);
Console.WriteLine("Задача выполнена.");
Options:
- Задача выполнена.
- Задача выполнена через 1 секунду.
- Задача выполняется.
- Ошибка компиляции.
Explanation: await Task.Delay(1000) приостанавливает выполнение на 1 секунду, после чего выводится сообщение.
CorrectAnswerIndex: 0

Question: Какой метод используется для синхронизации потоков в C#?
Options:
- Thread
- Task
- lock
- Parallel.For
Explanation: Для синхронизации потоков используется ключевое слово lock.
CorrectAnswerIndex: 2
